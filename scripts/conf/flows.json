[
  {
    "id": "9f82431976a59e85",
    "type": "tab",
    "label": "JSON Builder",
    "disabled": false,
    "info": "",
    "env": []
  },
  {
    "id": "b54f91436304b681",
    "type": "function",
    "z": "9f82431976a59e85",
    "name": "Set Modified Variables",
    "func": "msg.payload = msg.payload;\nmsg.payload.graphs_Ford = {};\n\n// Convert float 32 to hexadecimal\nconst Float32ToHex = (float32) => {\n    const getHex = i => ('00' + i.toString(16)).slice(-2);\n    var view = new DataView(new ArrayBuffer(4))\n    view.setFloat32(0, float32);\n    return Array.apply(null, { length: 4 }).map((_, i) => getHex(view.getUint8(i))).join('');\n}\n\n// Encode a floating point array in base64\nfunction Base64EncodeFloatingPointArray(array){\n    var hexStringArray = \"\";\n    // Convert float to hex\n    array.forEach(function (x) {\n        var hexString = Float32ToHex(x);\n        hexStringArray = hexStringArray.concat(hexString);\n    });\n    // Base 64 Encode\n    var base64String = Buffer.from(hexStringArray, 'hex').toString('base64')\n    return base64String;\n}\n\n// Multi-channel logic\nif (msg.payload.hasOwnProperty('no of channels')){\n    var lastTighteningStepMultiChannel = [];\n    // Only send last tightening step of each channel\n    msg.payload.channels.forEach(function(channel) {\n        lastTighteningStepMultiChannel.push(channel['tightening steps'][channel['tightening steps'].length - 1])\n    });\n    msg.payload.lastTighteningStepMultiChannel = lastTighteningStepMultiChannel;\n\n    // Combine all tightening step graphs into a single array\n    var channel_angles = [];\n    var channel_torques = [];\n    var channel_gradient_values = [];\n    var channel_torqueRed_values = [];\n    var channel_angleRed_values = [];\n    var channel_time_values = [];\n    msg.payload['channels'].forEach(function(channel) {\n        var angles = [];\n        var torques = [];\n        var gradient_values = [];\n        var torqueRed_values = [];\n        var angleRed_values = [];\n        var time_values = [];\n        channel['tightening steps'].forEach(function (step) {\n            Array.prototype.push.apply(angles, step.graph['angle values']);\n            Array.prototype.push.apply(torques, step.graph['torque values']);\n            Array.prototype.push.apply(gradient_values, step.graph['gradient values']);\n            Array.prototype.push.apply(torqueRed_values, step.graph['torqueRed values']);\n            Array.prototype.push.apply(angleRed_values, step.graph['angleRed values']);\n            Array.prototype.push.apply(time_values, step.graph['time values']);\n        });\n        channel_angles.push(angles);\n        channel_torques.push(torques);\n        channel_gradient_values.push(gradient_values);\n        channel_torqueRed_values.push(torqueRed_values);\n        channel_angleRed_values.push(angleRed_values);\n        channel_time_values.push(time_values);\n    });\n    // Set graph values\n    msg.payload.graphs_Ford.channel_angles_Ford = channel_angles;\n    msg.payload.graphs_Ford.channel_torques_Ford = channel_torques;\n    msg.payload.graphs_Ford.channel_gradient_values_Ford = channel_gradient_values;\n    msg.payload.graphs_Ford.channel_torqueRed_values_Ford = channel_torqueRed_values;\n    msg.payload.graphs_Ford.channel_angleRed_values_Ford = channel_angleRed_values;\n    msg.payload.graphs_Ford.channel_time_values_Ford = channel_time_values;\n    \n\n} else {\n    // Single channel logic\n\n    // Grab last tightening step\n    var lastTighteningStep = msg.payload['tightening steps'][msg.payload['tightening steps'].length - 1];\n    msg.payload.lastTighteningStep_Ford = lastTighteningStep;\n\n    // Combine all tightening step graphs into a single array\n    var angles = [];\n    var torques = [];\n    var gradient_values = [];\n    var torqueRed_values = [];\n    var angleRed_values = [];\n    var time_values = [];\n    \n    msg.payload['tightening steps'].forEach(function(step) {\n        Array.prototype.push.apply(angles,step.graph['angle values']);\n        Array.prototype.push.apply(torques, step.graph['torque values']);\n        Array.prototype.push.apply(gradient_values, step.graph['gradient values']);\n        Array.prototype.push.apply(torqueRed_values, step.graph['torqueRed values']);\n        Array.prototype.push.apply(angleRed_values, step.graph['angleRed values']);\n        Array.prototype.push.apply(time_values, step.graph['time values']);\n    });\n    msg.payload.graphs_Ford.angles_Ford = Base64EncodeFloatingPointArray(angles);\n    msg.payload.graphs_Ford.torques_Ford = Base64EncodeFloatingPointArray(torques);\n    msg.payload.graphs_Ford.gradient_values_Ford = Base64EncodeFloatingPointArray(gradient_values);\n    msg.payload.graphs_Ford.torqueRed_values_Ford = Base64EncodeFloatingPointArray(torqueRed_values);\n    msg.payload.graphs_Ford.angleRed_values_Ford = Base64EncodeFloatingPointArray(angleRed_values);\n    msg.payload.graphs_Ford.time_values_Ford = Base64EncodeFloatingPointArray(time_values);\n}\n\n// Increment transaction counter and add to JSON\nvar transCounter = flow.get('TransCounter');\nif (transCounter == undefined) {\n    flow.set('TransCounter', 1);\n} else {\n    flow.set('TransCounter', transCounter + 1);\n}\nmsg.payload.transCounter_Ford = transCounter;\n\n// Convert tightening tool timestamp to Ford spec\nvar tighteningDate = new Date(msg.payload.dateIso);\nvar tighteningMessageDateIso = tighteningDate.toISOString();\nmsg.payload.dateIsoTool_Ford = tighteningMessageDateIso;\n\n// Set node red message timestamp\nvar date = new Date(Date.now());\nvar messageTimestamp = date.toISOString();\nflow.set('MessageTimeStamp', messageTimestamp);\nmsg.payload.dateIsoNodeRed_Ford = messageTimestamp;\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 800,
    "y": 340,
    "wires": [["7e94784804e5b3ba"]]
  },
  {
    "id": "869d3706cb679253",
    "type": "http in",
    "z": "9f82431976a59e85",
    "name": "",
    "url": "/tightening",
    "method": "post",
    "upload": false,
    "swaggerDoc": "",
    "x": 420,
    "y": 220,
    "wires": [["1db29ecfdc9d397f", "b54f91436304b681"]]
  },
  {
    "id": "1db29ecfdc9d397f",
    "type": "http response",
    "z": "9f82431976a59e85",
    "name": "HTTP Response",
    "statusCode": "",
    "headers": {},
    "x": 780,
    "y": 220,
    "wires": []
  },
  {
    "id": "4171010b6298139f",
    "type": "debug",
    "z": "9f82431976a59e85",
    "name": "To MQTT",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "payload",
    "targetType": "msg",
    "statusVal": "",
    "statusType": "auto",
    "x": 980,
    "y": 520,
    "wires": []
  },
  {
    "id": "4f691380cd378b2d",
    "type": "switch",
    "z": "9f82431976a59e85",
    "name": "",
    "property": "payload",
    "propertyType": "msg",
    "rules": [
      {
        "t": "neq",
        "v": "{}",
        "vt": "str"
      }
    ],
    "checkall": "true",
    "repair": false,
    "outputs": 1,
    "x": 1250,
    "y": 420,
    "wires": [["4171010b6298139f", "2fe94e49d7eafadc"]]
  },
  {
    "id": "2fe94e49d7eafadc",
    "type": "mqtt out",
    "z": "9f82431976a59e85",
    "name": "mqtt test publish",
    "topic": "test",
    "qos": "2",
    "retain": "true",
    "respTopic": "",
    "contentType": "",
    "userProps": "",
    "correl": "",
    "expiry": "",
    "broker": "aa39025727a62a5e",
    "x": 780,
    "y": 520,
    "wires": []
  },
  {
    "id": "a673f212bc1665aa",
    "type": "mqtt in",
    "z": "9f82431976a59e85",
    "name": "mqtt test subscribe",
    "topic": "test",
    "qos": "2",
    "datatype": "auto-detect",
    "broker": "aa39025727a62a5e",
    "nl": false,
    "rap": true,
    "rh": 0,
    "inputs": 0,
    "x": 770,
    "y": 580,
    "wires": [["4b3bc9ae04d36a81"]]
  },
  {
    "id": "4b3bc9ae04d36a81",
    "type": "debug",
    "z": "9f82431976a59e85",
    "name": "From MQTT",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "payload",
    "targetType": "msg",
    "statusVal": "",
    "statusType": "auto",
    "x": 990,
    "y": 580,
    "wires": []
  },
  {
    "id": "9f1fccdf8988ef06",
    "type": "change",
    "z": "9f82431976a59e85",
    "name": "Store Flow Schema",
    "rules": [
      {
        "t": "set",
        "p": "schema",
        "pt": "flow",
        "to": "outputSchema",
        "tot": "msg"
      }
    ],
    "action": "",
    "property": "",
    "from": "",
    "to": "",
    "reg": false,
    "x": 1030,
    "y": 100,
    "wires": [[]]
  },
  {
    "id": "7e94784804e5b3ba",
    "type": "function",
    "z": "9f82431976a59e85",
    "name": "Pass Data Through Schema",
    "func": "let output_json = {};\nlet output_json_string = \"\";\nlet schema = flow.get('schema');\nlet input_json = msg.payload;\nlet _ = global.get('lodash');\n\nlet schemaPaths = [];\n\nfunction findKey(obj) {\n    Object.keys(obj).forEach(key => {\n        if (typeof (obj[key]) == 'string') {\n            if (obj[key].includes(\"<$\") && obj[key].includes(\"_$>\")) {\n                var startIdx = obj[key].indexOf(\"<$\");\n                var endIdx = obj[key].indexOf(\"_$>\");\n                var type = obj[key].slice(startIdx + 2, endIdx);\n                var tString = obj[key].substring(0, startIdx).replace('root', 'input_json');\n                var value = eval(tString);\n                if(obj[key].includes(\"<%base64_%>\")){\n                    value = value + \"<%base64_%>\";\n                }\n                switch (type) {\n                    case 'string':\n                        _.set(obj, key, String(value));\n                        break;\n                    case 'number':\n                        _.set(obj, key, Number(value));\n                        break;\n                    case 'boolean':\n                        _.set(obj, key, Boolean(value));\n                        break;\n                    case 'array':\n                        _.set(obj, key, value);\n                        break;\n                    case 'object':\n                        _.set(obj, key, value);\n                        break;\n                    default:\n                        node.warn('Invalid Type!')\n                }\n            }\n        } else if (typeof (obj[key]) == 'object' && obj[key] !== null) {\n            findKey(obj[key]);\n        } else if (obj[key] == null) {\n            _.set(obj, key, null);\n        }\n    })\n}\n\nfunction parseReferences(inputSchema){\n    output_json = _.cloneDeep(JSON.parse(inputSchema));\n    // Replace schema values with input data\n    findKey(output_json);\n    // Check for base64 encoding of properties\n    base64EncodeProperties(output_json);\n    // // Check for base64 encoding of objects\n    base64EncodeObjects(output_json, \"\");\n    // Stringify JSON for output\n    output_json_string = JSON.stringify(output_json,undefined,2);\n}\n\nfunction base64EncodeProperties(obj){\n    Object.keys(obj).forEach(key => {\n        if (typeof(obj[key]) == 'string'){\n            if (obj[key].includes(\"<%base64_%>\")){\n                var valueString = obj[key].substring(0,obj[key].indexOf(\"<%\"));\n                var b64String = Buffer.from(JSON.stringify(valueString)).toString(\"base64\");\n                _.set(obj, key, b64String);\n            }\n        } else if(typeof(obj[key]) == 'object' && obj[key] !== null){\n            base64EncodeProperties(obj[key]);\n        }\n    });\n}\n\nfunction base64EncodeObjects(obj, keyIn){\n    // Loop through each child object and check for base64 encoding\n    Object.keys(obj).forEach(key => {\n        // Check if child objects are also base64 encoded\n        if (typeof(obj[key]) == 'object'){\n            // Add keys to current path when digging into objects\n            schemaPaths.push(key);\n            base64EncodeObjects(obj[key], key);\n        } \n    });\n    // After all child objects checked, bubble up and encode entire objects\n    if(obj.hasOwnProperty('base64_encoded')){\n        var b64String = Buffer.from(JSON.stringify(obj)).toString(\"base64\");\n        // Remove keys from path that are nested below current level\n        schemaPaths = schemaPaths.slice(0, schemaPaths.indexOf(keyIn)+1);\n        // Find object path to set base64 encoded object at correct location\n        var joinedPath = schemaPaths.join('.');\n        _.set(output_json, joinedPath, b64String);\n    } else {\n        // Remove objects from path that are not base64 encoded\n        schemaPaths.pop();\n    }\n}\n        \nif(schema){    \n    parseReferences(schema)\n    msg.outputValue = output_json_string;\n    msg.outputSchema = schema;\n}\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 1080,
    "y": 340,
    "wires": [["976bd95771e098cd"]]
  },
  {
    "id": "aaac7de732bdac01",
    "type": "ui_template",
    "z": "9f82431976a59e85",
    "group": "9b0bd1f1847b9314",
    "name": "link_scripts",
    "order": 5,
    "width": 0,
    "height": 0,
    "format": "<script src=\"http://192.168.1.100:2244/js/jquery-3.6.3.min.js\"></script>\n<script src=\"http://192.168.1.100:2244/js/jquery-ui.min.js\"></script>\n<script src=\"http://192.168.1.100:2244/js/lodash.min.js\"></script>\n<link href=\"http://192.168.1.100:2244/css/bootstrap.min.css\" rel=\"stylesheet\" />\n<link href=\"http://192.168.1.100:2244/css/bootstrap-icons.css\" rel=\"stylesheet\" />\n<link href=\"http://192.168.1.100:2244/css/all.min.css\" rel=\"stylesheet\" />\n<link href=\"http://192.168.1.100:2244/css/select2.min.css\" rel=\"stylesheet\" />\n",
    "storeOutMessages": true,
    "fwdInMessages": true,
    "resendOnRefresh": true,
    "templateScope": "global",
    "className": "",
    "x": 650,
    "y": 100,
    "wires": [[]]
  },
  {
    "id": "07f740dd1e0765ff",
    "type": "ui_template",
    "z": "9f82431976a59e85",
    "group": "9b0bd1f1847b9314",
    "name": "JSON Builder",
    "order": 1,
    "width": 18,
    "height": 16,
    "format": "<script>\n    var currentPath = \"root\";\n    var lastMenuEvent = null;\n    var referencePaths = [];\n    var payload = [];\n    var input_json = {};\n    var output_json = {};\n    var output_json_string = \"\";\n    var validDataTypes = ['string', 'number', 'array', 'object', 'boolean', 'null'];\n    var json_tree = {};\n    var json_schema = \"\";\n    var referenceRoot = 'root';\n    var referenceFindPath = referenceRoot;\n    var children = {};\n    var referenceTree = [];\n    var inputKeys = [];\n    var inputReferenceTree = [];\n    var inputChildren = {};\n    var inputReferenceFindPath = referenceRoot;\n\n    (function(scope) {\n        $(document).ready(function(e) {\n        var tableDiv = document.getElementById('tableDiv');\n        var dataTable = document.getElementById('dataTable');\n        var addItemButton = document.getElementById('addItem');\n            addItemButton.addEventListener('click', (event) => generateInput(dataTable,undefined,undefined,undefined,undefined,false, true));\n        var addIndexButton = document.getElementById('addArrayIndex');\n            addIndexButton.addEventListener('click', (event) => addArrayIndex());\n        var dropDownLinks = document.getElementsByClassName('dropdown-toggle');\n        var dropDownMenus = document.getElementsByClassName('dropdown-menu');\n        var dataFieldList = document.getElementById('dataFields');\n        var dataTypeList = document.getElementById('dataTypes');\n        var topLevelDropdown = document.querySelector('#root');\n        \n        var fileUpload = document.getElementById('file-upload');\n        fileUpload.addEventListener(\"change\", onFileUploadChange, false);\n        \n        function onFileUploadChange(e) {\n            referencePaths = [];\n            referenceTree = [];\n            for(var i = 0; i<topLevelDropdown.nextElementSibling.children.length; i++){\n                topLevelDropdown.nextElementSibling.children[i].removeFromDOM;\n            }\n        \n        var file = e.target.files[0];\n        var fr = new FileReader();\n        \n        fr.addEventListener(\"load\", () => {\n        json_tree = JSON.parse(fr.result);\n        buildSchema(json_tree);\n        logKeys(json_tree);\n            if (lastMenuEvent != null){\n                buildDropDown(lastMenuEvent, currentPath);\n            } else{\n                topLevelDropdown.click();\n            }\n        }, false);\n        \n        if(file){\n        fr.readAsText(file);\n        }\n        \n        }\n\n\n        // Add an additional index to an object array... copies data and populates new paths\n        function addArrayIndex(){\n            var arrayIndexPath = currentPath.replace('root.','') + '[0]';\n            var arrayPath = arrayIndexPath.replace(/ *\\[[^\\]]*]/, '');\n            var arrayLength = _.get(json_tree,arrayPath).length;\n            var newPath = arrayPath + `[${arrayLength}]`;\n\n            // Copy previous object and push to next index\n            var newIndex = {};\n            _.assign(newIndex,_.get(json_tree,arrayIndexPath));\n            _.set(json_tree,newPath, newIndex);\n\n            referencePaths.push('root.' + newPath);\n            findNestedPaths(_.get(json_tree,arrayIndexPath), newPath);\n            buildSchema(json_tree);\n            buildDropDown(lastMenuEvent,currentPath);\n            buildTable(currentPath)\n        };\n\n        function findNestedPaths(obj, initialPath){\n            Object.keys(obj).forEach(key => {\n                if(typeof(obj[key]) == 'object'){\n                    referencePaths.push('root.' + initialPath + \".\" + key);\n                    findNestedPaths(obj[key], initialPath + \".\" + key);\n                } else{\n                    if(!referencePaths.includes('root.' + initialPath + \".\" + key)){\n                        referencePaths.push('root.' + initialPath + \".\" + key);\n                        findNestedPaths(obj,initialPath);\n                    }\n                }\n            });\n        }\n\n        // Add event listeners to each dropdown item\n        function updateDropdownList(){\n            dropDownMenus = document.getElementsByClassName('dropdown-menu');\n            dropDownLinks = document.getElementsByClassName('dropdown-toggle');\n            for (i=0; i<dropDownLinks.length; i++) { if(dropDownLinks[i].getAttribute('listening') !== 'true'){\n                dropDownLinks[i].setAttribute('listening', true);\n                dropDownLinks[i].addEventListener('click', (event) => onDropdownClick(event));\n            } \n        }};\n\n        // Updates table and dropdown menus when a dropdown is clicked\n        function onDropdownClick(event) { \n            currentPath = event.currentTarget.id;\n            var arrayIndexPath = currentPath.replace('root.','');\n            var arrayPath = arrayIndexPath.replace(/ *\\[[^\\]]*]/, '');\n            if (Array.isArray(_.get(json_tree,arrayIndexPath))){\n                var subObj = _.get(json_tree,arrayPath + \"[0]\");\n                if(typeof(subObj) == 'object' && !Array.isArray(subObj)){\n                    addIndexButton.hidden = false;\n                }   else {\n                    addIndexButton.hidden = true;\n                }\n            } else {\n                addIndexButton.hidden = true;\n            }\n            if (currentPath != 'root'){\n            event.currentTarget.parentElement.style.backgroundColor = \"#cbf1f5\";\n            };\n\n            buildTable(currentPath);\n            lastMenuEvent = event;\n            buildDropDown(event, currentPath);\n            var el=event.currentTarget.nextElementSibling;\n            for (var i = 0; i<dropDownMenus.length ; i++){\n                var menu = dropDownMenus[i];\n                var hideMenu = true;\n                for (var j = 0; j < menu.children.length; j++){\n                    // Check if selected submenu is a child of higher menu or in the same submenu\n                    if (event.currentTarget.id.includes(menu.children[j].children[0].id)) {\n                        hideMenu = false;\n                    } else {\n                       menu.children[j].style.backgroundColor = \"white\";\n                    }\n                    if (event.target.parentElement.parentElement == menu){\n                        hideMenu = false;\n                    }\n                }\n                if (hideMenu){\n                    menu.style.display= 'none';\n\n                } else{\n                    menu.style.display = 'block';\n                }\n            }\n                            \n                if (el != null && el.children.length != 0){\n                el.style.display= 'block';\n                }\n            };\n        \n        function buildDropDown(event, referencePath){\n            var currentPathNodes = referencePath.split(/\\.\\b/);\n            // Loop over JSON tree and build menu based on reference path\n            if (referencePaths.length != 0){\n                            referencePaths.forEach(function(path){\n                                var checkPathNodes = path.split(/\\.\\b/);\n                                var existingElement = document.getElementById(path);\n                                if ((currentPathNodes.length == checkPathNodes.length -1 && path.includes(currentPath + \".\") && path[path.length-1] !== \"]\") || (currentPathNodes.length == checkPathNodes.length && path[path.length-1] == \"]\" && path.includes(currentPath))){\n                                    if (event.target.nextElementSibling == null){\n                                        var ul = document.createElement(\"ul\");\n                                        ul.setAttribute('class', 'dropdown-menu');\n                                        ul.setAttribute('aria-labelledby', event.target.id);\n                                        ul.setAttribute('style', \"display: block;\");\n                                        event.target.parentNode.appendChild(ul);\n                                    }\n                                    if (existingElement == null){\n                                        var li = document.createElement(\"li\");\n                                        var a = document.createElement(\"a\");\n                                        a.setAttribute('class', \"dropdown-item dropdown-toggle\");\n                                        a.setAttribute('href', \"#\");\n                                        a.setAttribute('data-bs-toggle', \"dropdown\");\n                                        a.setAttribute('aria-haspopup', \"true\");\n                                        a.setAttribute('aria-expanded', \"false\");\n                                        a.setAttribute('id',path);\n                                        a.appendChild(document.createTextNode(checkPathNodes[checkPathNodes.length-1]));\n                                        li.setAttribute('class', \"dropdown dropend\");\n                                        li.appendChild(a);\n                                        event.target.nextElementSibling.appendChild(li);\n                                    }                                            \n                                }\n                            });\n            };\n            updateDropdownList();\n        };\n\n        function buildTable(path){\n            // Clear existing table data\n            for(var i = dataTable.children.length-1; i >= 0; i--){\n                dataTable.children[i].remove();\n            };\n\n            // Slice desired path into node list\n            var pathNodes = path.split(/\\.\\b/);\n\n            var usedPaths = [];\n            referencePaths.forEach(function (p){\n                var index = false;\n                var base64 = false;\n                var addItem = false;\n                var pNodes = p.split(/\\.\\b/);\n                var pIndices = p.split(/[.,[]/);\n                var pIndexCount = pIndices.filter(index => index.includes(\"]\")).length;\n                var parentObj = {};\n                var obj = _.get(json_tree, p.replace('root.',''));\n                if (p[p.length-1] == \"]\"){\n                    parentObj = _.get(json_tree,path.replace('root.',''));\n                    index = true;\n                }\n                // Check for paths under parent node path\n                if (!index){\n                    if (pNodes.length == pathNodes.length +1 && p.includes(path + \".\") && p[p.length-1] !== \"]\"){\n                        addItem = true;\n                    }\n                } else {\n                    if (pNodes.length == pathNodes.length && p.includes(path) && p!==path){\n                        if(typeof(obj) == 'object' && pIndexCount == parentObj.length){\n                            addItem = true;\n                        } else if(typeof(obj) !== 'object' && parentObj.includes(obj)){\n                            addItem = true;\n                        }\n                    }\n                }\n                if (addItem){\n                 var tString =\"\";\n                    pNodes.forEach(function(node){\n                        if (node !== 'root'){\n                                if (tString == \"\"){\n                                    tString = node;\n                                } else {\n                                    tString = tString + \".\" + node;\n                                }                      \n                            }\n                    })\n                    var treeValue = _.get(json_tree,tString);\n                    if(typeof(treeValue) == 'string'){\n                        if(treeValue.includes(\"<%base64_%>\")){\n                        base64 = true;\n                        }\n                    } else if (typeof(treeValue) == 'object'){\n                        if(treeValue.hasOwnProperty('base64_encoded')){\n                            base64 = true;\n                        }\n                    }\n\n                    if(typeof(treeValue) == 'string' && treeValue.includes(\"<$\")){\n                        var startIdx=treeValue.indexOf(\"<$\");\n                        var endIdx=treeValue.indexOf(\"_$>\");\n                        var type = treeValue.slice(startIdx+2,endIdx);\n\n                        generateInput(dataTable, pNodes[pNodes.length - 1], treeValue,type, true, base64, false);\n                    } else {\n                        if (Array.isArray(treeValue)){\n                            generateInput(dataTable, pNodes[pNodes.length - 1], treeValue,'array', true, base64, false);\n                        } else {\n                            generateInput(dataTable, pNodes[pNodes.length - 1], treeValue,typeof(treeValue), true, base64, false);\n                        }\n\n                    }\n\n                }\n            })\n        };\n    \n        // Creates data field list based on input msg.payload\n        function buildDataFieldList(keys, element){\n            if(!dataFieldList.childElementCount){\n                for (let i = 0; i < keys.length; i++){\n                    var option = document.createElement('option');\n                    option.value = keys[i];\n                    dataFieldList.appendChild(option);\n                }\n            }\n            if (element !==null){\n                if(!element.childElementCount){ \n                    var init_option = document.createElement('option');\n                        init_option.value = null;\n                        init_option.text = 'null';\n                        element.appendChild(init_option);\n                    for (let i = 0; i < keys.length; i++){\n                        var option = document.createElement('option');\n                        option.value = keys[i];\n                        option.text = keys[i];\n                        element.appendChild(option);\n                    }\n                }\n            }\n\n        };\n\n        // Creates a table row and appends to the item table\n        function generateInput(parent_table, key, value, type, locked, base64, newItem){\n            var tableRow = document.createElement('tr');\n            var tableCol1 = document.createElement('td');\n            var tableCol2 = document.createElement('td');\n            var tableCol3 = document.createElement('td');\n            var tableCol4 = document.createElement('td');\n            var tableCol5 = document.createElement('td');\n            var tableCol6 = document.createElement('td');\n            var tableCol7 = document.createElement('td');\n            tableRow.appendChild(tableCol1);\n            tableRow.appendChild(tableCol2);\n            tableRow.appendChild(tableCol3);\n            tableRow.appendChild(tableCol4);\n            tableRow.appendChild(tableCol5);\n            tableRow.appendChild(tableCol6);\n            tableRow.appendChild(tableCol7);\n\n            var currentObj = _.get(json_tree,currentPath.replace('root.',''));\n            var firstIndex = false;\n\n            if(newItem && Array.isArray(currentObj)){\n                    locked = true;\n                    var nodes = currentPath.split('.');\n                    key = nodes[nodes.length-1] + `[${currentObj.length}]`;\n                if (currentObj.length !== 0){\n                    if(Array.isArray(currentObj[0])){\n                        type = 'array';\n                    } else {\n                        type = typeof(currentObj[0]);\n                    }\n                } else {\n                    firstIndex = true;\n                }\n            }\n\n            var inputField = document.createElement('select');\n            var id = \"id\" + Math.random().toString(16).slice(2);\n            inputField.setAttribute('id', id);\n            buildDataFieldList(inputKeys, inputField);\n            inputField.classList.add(\"form-control\");\n            inputField.classList.add(\"select2-dropdown\");\n                      \n            var inputKey = document.createElement('input');\n            inputKey.setAttribute('type', 'text');\n            inputKey.placeholder = 'Key';\n            if (key){\n                inputKey.value = key;\n            }\n            if (locked){\n                inputKey.disabled = true;\n            }\n\n            var inputType = document.createElement('select');\n            var patternString =\"\"\n            inputType.setAttribute('list', 'dataTypes');\n            inputType.setAttribute('type', 'search');\n            validDataTypes.forEach(function(type){\n                var option = document.createElement('option');\n                option.setAttribute('value', type);\n                option.appendChild(document.createTextNode(type));\n                inputType.appendChild(option);\n            });\n            inputType.placeholder = 'Data Type';\n            if (type){\n                inputType.value = type;\n            }\n            if (locked && !firstIndex){\n                inputType.disabled = true;              \n            }\n\n            var base64Div = document.createElement('div');\n            base64Div.style = \"border: 2px solid black;\"\n            var inputBase64 = document.createElement('input');\n            inputBase64.setAttribute('type', 'checkbox');\n            inputBase64.setAttribute('name', 'base64');\n            inputBase64.style = \"width: 100%; margin: auto;\";\n            var inputBase64Label = document.createElement('label');\n            inputBase64Label.setAttribute('for', 'base64');\n            inputBase64Label.innerHTML = \"base64\"\n            base64Div.appendChild(inputBase64);\n            base64Div.appendChild(inputBase64Label);\n\n            if(base64){\n                inputBase64.checked = true;\n            }\n            if(locked){\n                inputBase64.disabled = true;\n            }\n                 \n            var createButton = document.createElement('button');\n            createButton.setAttribute('type', 'button');\n            createButton.appendChild(document.createTextNode('Add Item'));\n            createButton.addEventListener('click', (event) => addItem(event));\n                        \n            var deleteButton = document.createElement('button');\n            deleteButton.setAttribute('type', 'button');\n            deleteButton.appendChild(document.createTextNode('Remove Item'));\n            deleteButton.addEventListener('click', (event) => removeItem(event));\n\n            var editButton = document.createElement('button');\n            editButton.setAttribute('type', 'button');\n            editButton.appendChild(document.createTextNode('Edit Item'));\n            editButton.addEventListener('click', editItem, true);\n\n            if(newItem){\n                editButton.disabled = true;\n                deleteButton.disabled = true;\n            } else {\n                createButton.disabled = true;\n            }\n            if (type == 'object'){\n                editButton.disabled = true;\n            }\n                        \n            tableCol1.appendChild(inputKey);\n            tableCol2.appendChild(inputField);\n            tableCol3.appendChild(inputType);\n            tableCol4.appendChild(base64Div);\n            tableCol5.appendChild(createButton);\n            tableCol6.appendChild(deleteButton);\n            tableCol7.appendChild(editButton);\n\n            parent_table.appendChild(tableRow);\n            \n            \n            $(`#${id}`).select2({\n                tags: true\n            });\n\n            var newValue = true;\n\n            inputKeys.forEach(function(key){\n                if(value == key){\n                    newValue = false;\n                }\n            })\n\n            if(newValue && value !== undefined){\n                var option = document.createElement('option');\n                if(value == null){\n                    option.setAttribute('value', 'null');\n                    option.appendChild(document.createTextNode('null'));\n                } else if(typeof(value) == \"string\" && value.includes(type)) {\n                    option.setAttribute('value', value.replace(`<$${type}_$>`,''));\n                    option.appendChild(document.createTextNode(value.replace(`<$${type}_$>`,'')));\n                } else {\n                    option.setAttribute('value', value.toString());\n                    option.appendChild(document.createTextNode(value.toString()));\n                }\n                inputField.appendChild(option);\n            }\n\n            if (value !== undefined){\n                if (value == null ){\n                    $(`#${id}`).val('null').trigger('change');\n                } else if (typeof(value) == 'string'){\n                    $(`#${id}`).val(value.replace(`<$${type}_$>`,'').toString()).trigger('change');\n                } else {\n                    $(`#${id}`).val(value.toString()).trigger('change');\n                }\n            }\n\n            if (locked && !newItem){\n                inputField.value = '';            \n                inputField.disabled = true;\n            }\n\n        };\n\n        function addItem(event){\n            \n            // Create another input field in table\n                //generateInput(dataTable)\n            // If this is a new input, add to json tree\n            if (event.path[2].childNodes[0].children[0].value != \"\" && !event.path[2].childNodes[1].children[0].disabled){\n                // Lock fields on submit\n                event.path[2].childNodes[0].children[0].setAttribute('disabled', true);\n                event.path[2].childNodes[1].children[0].setAttribute('disabled', true);\n                event.path[2].childNodes[2].children[0].setAttribute('disabled', true);\n                event.path[2].childNodes[3].children[0].children[0].disabled = true;\n                event.path[2].childNodes[4].children[0].disabled = true;\n                event.path[2].childNodes[5].children[0].disabled = false;\n                event.path[2].childNodes[6].children[0].disabled = false;\n\n                // Add key value pair to json tree object\n                var key = event.path[2].childNodes[0].children[0].value;\n                var value = event.path[2].childNodes[1].children[0].value;\n                var type = event.path[2].childNodes[2].children[0].value;\n                var base64 = event.path[2].childNodes[3].children[0].children[0].checked;\n                var passByReference = false;\n                var currentObj = _.get(json_tree,currentPath.replace('root.',''));\n                var newPath = \"\";\n                if (Array.isArray(currentObj)){\n                    var arrayIndexStart = key.lastIndexOf(\"[\");\n                    var arrayIndexString = key.slice(arrayIndexStart);\n                    newPath = currentPath + arrayIndexString;\n                } else {\n                    newPath = (currentPath +\".\" +key);\n                }\n\n                // Check if value is from input JSON\n                inputKeys.forEach(function(key){\n                    if (value === key){\n                        passByReference = true;\n                        value = value + \"<$\" + type + \"_$>\";\n                    }\n                })\n                \n                var subPath = currentPath.replace('root.','');\n                var parentType = typeof(_.get(json_tree,subPath));\n                referencePaths.push(newPath);\n                var setPath = newPath.replace('root.','');\n\n                if(base64){\n                    if(type != 'object' && type != 'null'){\n                        value = value+ \"<%base64_%>\";\n                    } else if(type == \"object\"){\n                        _.set(json_tree, setPath+\".base64_encoded\", true);\n                        referencePaths.push(newPath + \".base64_encoded\");\n                    }\n                }\n\n                if(!passByReference){\n                    switch(type){\n                    case 'string':\n                                    _.set(json_tree, setPath, String(value));\n                                    break;\n                    case 'number':\n                                    _.set(json_tree, setPath, Number(value));\n                                    break;\n                    case 'boolean':\n                                    _.set(json_tree, setPath, Boolean(value));\n                                    break;\n                    case 'array':\n                                    _.set(json_tree, setPath, []);\n                                    break;\n                    case 'object':\n                        if(!base64){\n                            _.set(json_tree, setPath, {});\n                            break;\n                        } else {\n                            break;\n                        }\n\n                    case 'null':\n                                    _.set(json_tree, setPath, null);\n                                    break;\n                    default:\n                                    alert('Invalid Type!')\n                                    }\n                } else {\n                    _.set(json_tree, setPath, String(value));\n                }\n\n\n                if (lastMenuEvent != null){\n                buildDropDown(lastMenuEvent, currentPath);\n                } else{\n                    topLevelDropdown.click();\n                }\n            }\n            buildSchema(json_tree);\n        };\n\n        function removeItem(event, path){\n            \n            var subPath = null;\n            if (!path){\n                subPath = event.path[2].children[0].children[0].value;\n            } else {\n                subPath = path;\n            }\n            var builtPath = 'root';\n            if(currentPath !== 'root'){\n                builtPath = buildPath(json_tree, subPath);\n            }\n\n            if(!subPath == \"\"){\n                if(builtPath !== 'root'){\n                    removeFromDOM('root.' + builtPath);\n                    referencePaths = referencePaths.filter(e => e !== ('root.' + builtPath));\n                    _.unset(json_tree,builtPath.replace('root.',''));\n                } else {\n                    removeFromDOM('root.' + subPath);\n                    referencePaths = referencePaths.filter(e => e !== ('root.' + subPath));\n                    _.unset(json_tree,subPath);\n                }\n                if(Array.isArray(_.get(json_tree,currentPath.replace('root.','')))){\n                    _.pullAt(_.get(json_tree,currentPath.replace('root.','')), builtPath[builtPath.length-2]);\n                }\n            }\n            if (event !== undefined){\n            event.path[2].remove();\n            }\n\n            buildSchema(json_tree);\n        };\n\n        function removeFromDOM(path){\n            var existingElement = document.getElementById(path);\n            var existingElementDropdown = existingElement.nextElementSibling;\n            if (existingElement.parentElement.parentElement.childElementCount == 1){\n                existingElement.parentElement.parentElement.remove();\n            }\n            if (existingElementDropdown !== null){\n                existingElementDropdown.remove();\n            } else {\n                existingElement.parentElement.remove();\n            }   \n        };\n\n        function editItem(event){\n            var editButton = event.path[2].childNodes[6].children[0];\n            var keyInput = event.path[2].childNodes[0].children[0];\n            var fieldInput = event.path[2].childNodes[1].children[0];\n            if(!Array.isArray(_.get(json_tree,currentPath.replace('root.','')))){\n                keyInput.removeAttribute('disabled');\n            }\n            keyInput.setAttribute('prevValue', keyInput.value);\n            fieldInput.removeAttribute('disabled');\n            editButton.childNodes[0].textContent = 'Submit Change';\n            editButton.removeEventListener('click', editItem,true);\n            editButton.addEventListener('click', submitEdit,true);\n        }\n\n        function submitEdit(event){\n            var editButton = event.path[2].childNodes[6].children[0];\n            var keyInput = event.path[2].childNodes[0].children[0];\n            var fieldInput = event.path[2].childNodes[1].children[0];\n            var typeInput = event.path[2].childNodes[2].children[0];\n            var type = typeInput.value;\n            var newValue = event.path[2].children[1].children[0].value;\n            var base64 = event.path[2].childNodes[3].children[0].children[0].checked;\n            var prevKey = keyInput.getAttribute('prevValue');\n            var passByReference = false;\n\n            var editPath = \"\";\n            var subPath = \"\";\n            var oldPath = \"\";\n            var isArray = Array.isArray(_.get(json_tree,currentPath.replace('root.','')));\n            if(!isArray){\n                subPath = keyInput.value;\n            } else {\n                var indexStart = keyInput.value.lastIndexOf(\"[\");\n                subPath = keyInput.value.slice(indexStart);\n            }\n            editPath = currentPath + \".\" + subPath;\n            oldPath = currentPath + \".\" + prevKey;\n\n\n            // Check if value is from input JSON\n            inputKeys.forEach(function(key){\n                if (newValue === key){\n                    newValue = newValue + \"<$\" + type + \"_$>\";\n                    passByReference = true;\n                } \n            })\n            \n            if(base64){\n                newValue = newValue+ \"<%base64_%>\";\n            }\n\n            fieldInput.setAttribute('disabled', true);\n            keyInput.setAttribute('disabled',true);\n            typeInput.setAttribute('disabled',true);\n            editButton.childNodes[0].textContent = 'Edit Item';\n            editButton.removeEventListener('click', submitEdit,true);\n            editButton.addEventListener('click', editItem,true);\n\n            // Check if key has changed... if not, just set value, otherwise remove key and add new\n            if((!isArray && prevKey !== subPath)){\n                removeItem(undefined,prevKey);\n                referencePaths.push(editPath);\n            }\n            if (!passByReference){\n            switch(type){\n                case 'string':\n                    _.set(json_tree, editPath.replace('root.',''), String(newValue));\n                    break;\n                case 'number':\n                    _.set(json_tree, editPath.replace('root.',''), Number(newValue));\n                    break;\n                case 'boolean':\n                    _.set(json_tree, editPath.replace('root.',''), Boolean(newValue));\n                    break;\n                case 'array':\n                    _.set(json_tree, editPath.replace('root.',''), []);\n                    break;\n                case 'object':\n                    _.set(json_tree, editPath.replace('root.',''), {});\n                    break;\n                case 'null':\n                    _.set(json_tree, editPath.replace('root.',''), null);\n                    break;\n                default:\n                    alert('Invalid Type!')\n                }\n            } else {\n                _.set(json_tree, editPath.replace('root.',''), String(newValue));\n            }\n\n            buildTable(currentPath);\n            buildDropDown(event, currentPath);\n            buildSchema(json_tree);\n        }\n\n        // function parseReferences(inputJSON, inputSchema){\n        //     output_json = _.cloneDeep(JSON.parse(inputSchema));\n        //     // Replace schema values with input data\n        //     findKey(output_json);\n        //     // Check for base64 encoding of properties\n        //     // base64EncodeProperties(output_json);\n        //     // // Check for base64 encoding of objects\n        //     // base64EncodeObjects(output_json, \"\");\n        //     // Stringify JSON for output\n        //     output_json_string = JSON.stringify(output_json,undefined,2);\n        //     console.log(output_json)\n\n        //     scope.send({outputValue:output_json_string});\n        // };\n\n        // function base64EncodeProperties(obj){\n        //     Object.keys(obj).forEach(key => {\n        //         if (typeof(obj[key]) == 'string'){\n        //             if (obj[key].includes(\"<%base64_%>\")){\n        //                 // var valueString = obj[key].substring(0,obj[key].indexOf(\"<%\"));\n        //                 // var b64String = Buffer.from(JSON.stringify(valueString)).toString(\"base64\");\n        //                 var b64String = \"b64String\";\n        //                 _.set(obj, key, b64String);\n        //             }\n        //         } else if(typeof(obj[key]) == 'object' && obj[key] !== null){\n        //             base64EncodeProperties(obj[key]);\n        //         }\n        //     });\n        // }\n\n        // function base64EncodeObjects(obj, keyIn){\n        //     // Loop through each child object and check for base64 encoding\n        //     Object.keys(obj).forEach(key => {\n        //         // Check if child objects are also base64 encoded\n        //         if (typeof(obj[key]) == 'object'){\n        //             base64EncodeObjects(obj[key], key);\n        //         } \n        //     });\n        //     // After all child objects checked, bubble up and encode entire objects\n        //     if(obj.hasOwnProperty('base64_encoded')){\n        //         // var b64String = Buffer.from(JSON.stringify(obj)).toString(\"base64\");\n        //         // Find object path to set base64 encoded object at correct location\n        //         var pathStrings = buildPath(output_json, keyIn).split('.');\n        //         pathStrings.pop();\n        //         var b64String = \"b64Object\";\n        //         _.set(output_json, pathStrings.join('.'), b64String);\n        //     }\n        // }\n        \n        function findKey(obj){\n            Object.keys(obj).forEach(key => {\n                if (typeof(obj[key]) == 'string'){\n                    if (obj[key].includes(\"<$\") && obj[key].includes(\"_$>\")){\n                        var startIdx=obj[key].indexOf(\"<$\");\n                        var endIdx=obj[key].indexOf(\"_$>\");\n                        var type = obj[key].slice(startIdx+2,endIdx);\n                        var tString = obj[key].substring(0,startIdx).replace('root','input_json');\n                        var value = eval(tString);\n                        switch(type){\n                        case 'string':\n                            _.set(obj, key, String(value));\n                            break;\n                        case 'number':\n                            _.set(obj, key, Number(value));\n                            break;\n                        case 'boolean':\n                            _.set(obj, key, Boolean(value));\n                            break;\n                        case 'array':\n                            _.set(obj, key, value);\n                            break;\n                        case 'object':\n                            _.set(obj, key, value);\n                            break;\n                        default:\n                            alert('Invalid Type!')\n                        } \n                    }\n                } else if(typeof(obj[key]) == 'object' && obj[key] !== null){\n                    findKey(obj[key]);\n                } else if(obj[key] == null){\n                    _.set(obj, key, null);\n                }\n            });\n        };\n\n        function buildSchema(jsonTree){\n            json_schema = JSON.stringify(jsonTree, undefined, 2);\n            scope.send({outputSchema:json_schema});\n        };\n\n        function buildPath(jsonTree, selectedPath){\n            var currentNoRoot = currentPath.replace('root.','');\n            var pathNodes = currentNoRoot.split(/\\.\\b/);\n            var builtPath = \"\";\n            pathNodes.forEach(function (node){\n                if (builtPath == \"\"){\n                    builtPath = builtPath + node;\n                } else {\n                    builtPath = builtPath + \".\" + node;\n                }\n            })\n            if(selectedPath[selectedPath.length-1] == \"]\"){\n                return builtPath + `[${selectedPath[selectedPath.length-2]}]` ;\n            } else {\n                return builtPath + \".\" + selectedPath;\n            }\n        }\n\n        function logKeys(obj) {\n        referenceFindPath = buildReferencePath(referenceRoot, referenceTree);\n        if(obj == null){\n            children[referenceFindPath] = null;\n            var popped = referenceTree.pop()\n            for(let i = referenceTree.length-1; i>=0; i--){\n                var peak = referenceTree[referenceTree.length-1];\n                var checkParentPath = buildReferencePath(referenceRoot, referenceTree);\n                if (popped === children[checkParentPath][children[checkParentPath].length - 1]){\n                    popped = referenceTree.pop()\n                }\n            }\n        } else {\n                    children[referenceFindPath] = (Object.keys(obj));\n        children[referenceFindPath].forEach(function(element) {\n            referenceFindPath = buildReferencePath(referenceRoot, referenceTree);\n\n        // Check if child key is an object that needs to be iterated through\n        var subObj = _.get(json_tree,referenceFindPath.replace('root','') + \"['\" + element + \"']\");          \n            var tempPath = referenceFindPath.replaceAll(\"['\",'.').replaceAll(\"']\",'');\n            tempPath = tempPath.replaceAll(/\\b(\\d+)\\b/g, '[$1]');\n            tempPath = tempPath.replaceAll('.[','[');\n            if(!Number.isInteger(parseInt(element))){\n                referencePaths.push(tempPath + \".\" + element);\n            } else{\n                referencePaths.push(tempPath + \"[\" + element + \"]\");\n            }\n        if (typeof(subObj) === 'object'){\n            referenceTree.push(element);\n            referenceFindPath = buildReferencePath(referenceRoot, referenceTree);\n            // Call self recursively to log child nodes\n            logKeys(_.get(json_tree,referenceFindPath.replace('root','')));\n        } else {\n                if (children[referenceFindPath] == null || element === children[referenceFindPath][children[referenceFindPath].length - 1]){\n                    var popped = referenceTree.pop()\n                    for(let i = referenceTree.length-1; i>=0; i--){\n                        var peak = referenceTree[referenceTree.length-1];\n                        var checkParentPath = buildReferencePath(referenceRoot, referenceTree);\n                        if (popped === children[checkParentPath][children[checkParentPath].length - 1]){\n                            popped = referenceTree.pop()\n                        }\n                }\n            }\n        }\n        });\n        }\n\n        };\n\n        function logInputKeys(obj) {\n        inputReferenceFindPath = buildReferencePath(referenceRoot, inputReferenceTree);\n                if(obj == null){\n                children[referenceFindPath] = null;\n                var popped = referenceTree.pop()\n                for(let i = referenceTree.length-1; i>=0; i--){\n                var peak = referenceTree[referenceTree.length-1];\n                var checkParentPath = buildReferencePath(referenceRoot, referenceTree);\n                if (popped === children[checkParentPath][children[checkParentPath].length - 1]){\n                popped = referenceTree.pop()\n                }\n                }\n                } else {\n        inputChildren[inputReferenceFindPath] = (Object.keys(obj));\n        inputChildren[inputReferenceFindPath].forEach(function(element) {\n            inputReferenceFindPath = buildReferencePath(referenceRoot, inputReferenceTree);\n            // Check if child key is an object that needs to be iterated through\n            var subObj = _.get(input_json,inputReferenceFindPath.replace('root','') + \"['\" + element + \"']\");          \n                inputKeys.push(inputReferenceFindPath + \"['\" + element + \"']\");\n            if (typeof(subObj) === 'object'){\n                inputReferenceTree.push(element);\n                inputReferenceFindPath = buildReferencePath(referenceRoot, inputReferenceTree);\n                // Call self recursively to log child nodes\n                logInputKeys(_.get(input_json,inputReferenceFindPath.replace('root','')));\n            } else {\n                    if (inputChildren[inputReferenceFindPath] == null || element === inputChildren[inputReferenceFindPath][inputChildren[inputReferenceFindPath].length - 1]){\n                        var popped = inputReferenceTree.pop()\n                        for(let i = inputReferenceTree.length-1; i>=0; i--){\n                            var checkParentPath = buildReferencePath(referenceRoot, inputReferenceTree);\n                            if (popped === inputChildren[checkParentPath][inputChildren[checkParentPath].length - 1]){\n                                popped = inputReferenceTree.pop()\n                            }\n                    }\n                }\n            }\n        });\n                }\n\n        };\n\n\n        function buildReferencePath(root, tree){\n        var path = \"\";\n        if (tree.length){\n            tree.forEach(function(child) {\n                if (path != \"\"){\n                    path = path + \"['\" + child + \"']\";\n                } else {\n                    path = root + \"['\" + child + \"']\";\n                }\n            });\n        } else {\n            path = root;\n        }\n        return path;\n        }\n\n        updateDropdownList();\n        //scope.send({outputSchema:json_schema});\n       // scope.send({outputValue:output_json_string});\n\n        scope.$watch('msg.payload', function(data) {\n            input_json = data;\n            payload = data;\n            if (payload){\n                inputKeys = [];\n                logInputKeys((payload));\n                //parseReferences(input_json, json_schema);\n                scope.send({input_data: input_json});\n            }                \n        });\n        });\n    })(scope);\n   \n</script>\n\n<datalist id=\"dataFields\">\n</datalist>\n\n    <h3 class=\"mb-2\">Build Schema</h3>\n    <input type=\"file\" id=\"file-upload\"/>\n    <div id=\"buttonDiv\">\n        <button type = \"button\" id = \"addItem\">New Item</button>\n        <button type = \"button\" id = \"addArrayIndex\" hidden = \"true\">Add Index</button>\n    </div>\n    <div id=\"tableDiv\">\n        <table id=\"dataTable\">\n        </table>\n    </div>\n\n\n    <div class=\"dropdown\">\n        <a class=\"btn btn-secondary dropdown-toggle\" href=\"#\" role=\"button\" id=\"root\"\n            data-bs-toggle=\"dropdown\" aria-expanded=\"false\">\n            Root\n        </a>\n        <ul class=\"dropdown-menu\" aria-labelledby=\"root\">\n        </ul>\n    </div>\n\n\n",
    "storeOutMessages": false,
    "fwdInMessages": false,
    "resendOnRefresh": true,
    "templateScope": "local",
    "className": "",
    "x": 840,
    "y": 100,
    "wires": [["9f1fccdf8988ef06"]]
  },
  {
    "id": "c2bdd4b70ead871d",
    "type": "ui_template",
    "z": "9f82431976a59e85",
    "group": "91594fd1a4a6b111",
    "name": "Input Data Text Box",
    "order": 1,
    "width": 16,
    "height": 8,
    "format": "<script>\nvar inputValue = \"\";\nvar textInput = document.getElementById('textInput');\n\n// or overwrite value in your callback function ...\nthis.scope.action = function() { return inputValue; }\n\nfunction update(){\n    inputValue = textInput.value;\n}\n</script>\n<h3>Input JSON</h3>\n<textarea id= \"textInput\" onchange = 'update()' rows = \"30\" cols = \"50\"></textarea>\n<md-button ng-click=\"send({payload:action()})\">\n    Parse JSON\n</md-button>\n",
    "storeOutMessages": true,
    "fwdInMessages": true,
    "resendOnRefresh": true,
    "templateScope": "local",
    "className": "",
    "x": 430,
    "y": 340,
    "wires": [["b54f91436304b681"]]
  },
  {
    "id": "2ecf4458cbd63be9",
    "type": "ui_template",
    "z": "9f82431976a59e85",
    "group": "9b0bd1f1847b9314",
    "name": "css_styles",
    "order": 3,
    "width": 0,
    "height": 0,
    "format": "<style>\n    #addItem {\n        //margin-top: 30%;\n        width: 8em;\n        height: 3em;\n    }\n\n    #addArrayIndex {\n        //margin-top: 30%;\n        width: 8em;\n        height: 3em;\n    }\n    #buttonDiv{\n        margin-top: 10%;\n        display:inline;\n    }\n    .dropdown-item:focus {\n        outline: none;\n    }\n\n    #schema{\n        float: left;\n        width: 50%;\n    }\n    #output{\n        float: left;\n        width: 50%;\n    }\n\n    #file-upload{\n        display: block;\n    }\n\n    .select2-dropdown {\n    overflow-y: auto !important;\n    width: 50%;\n    }\n\n    /* .custom-combobox {\n    position: relative;\n    display: inline-block;\n    }\n    .custom-combobox-toggle {\n    position: absolute;\n    top: 0;\n    bottom: 0;\n    margin-left: -1px;\n    padding: 0;\n    }\n    .custom-combobox-input {\n    margin: 0;\n    padding: 5px 10px;\n    } */\n\n</style>",
    "storeOutMessages": true,
    "fwdInMessages": true,
    "resendOnRefresh": true,
    "templateScope": "global",
    "className": "",
    "x": 650,
    "y": 60,
    "wires": [[]]
  },
  {
    "id": "976bd95771e098cd",
    "type": "ui_template",
    "z": "9f82431976a59e85",
    "group": "91594fd1a4a6b111",
    "name": "Output Schema Text Box",
    "order": 3,
    "width": 16,
    "height": 8,
    "format": "<script>\n(function(scope) {\nvar outputSchema = \"\";\nvar outputValue = \"\";\nvar textOutputSchema = document.getElementById('textOutputSchema');\nvar textOutputValue = document.getElementById('textOutputValue');\n\n    scope.$watch('msg.outputSchema', function(data) {\n        if(data){\n            outputSchema = data;\n            textOutputSchema.textContent = outputSchema;\n        }\n\n    });\n\n    scope.$watch('msg.outputValue', function(dataSet) {\n        if(dataSet){\n        outputValue = dataSet;\n        textOutputValue.textContent = outputValue;\n        scope.send({payload:outputValue});\n        }\n        \n    });\n})(scope);\n\n\n</script>\n<div>\n    <div id=\"schema\">\n        <h3>Output Schema</h3>\n        <pre id= \"textOutputSchema\"</pre>\n    </div>\n    <div id=\"output\">\n        <h3>Output Value</h3>\n        <pre id=\"textOutputValue\"</pre>\n    </div>\n</div>\n",
    "storeOutMessages": true,
    "fwdInMessages": false,
    "resendOnRefresh": true,
    "templateScope": "local",
    "className": "",
    "x": 1070,
    "y": 420,
    "wires": [["4f691380cd378b2d"]]
  },
  {
    "id": "aa39025727a62a5e",
    "type": "mqtt-broker",
    "name": "MQTT Out",
    "broker": "192.168.1.200",
    "port": "1883",
    "clientid": "",
    "autoConnect": true,
    "usetls": false,
    "protocolVersion": "4",
    "keepalive": "60",
    "cleansession": true,
    "birthTopic": "",
    "birthQos": "0",
    "birthPayload": "",
    "birthMsg": {},
    "closeTopic": "",
    "closeQos": "0",
    "closePayload": "",
    "closeMsg": {},
    "willTopic": "",
    "willQos": "0",
    "willPayload": "",
    "willMsg": {},
    "sessionExpiry": ""
  },
  {
    "id": "9b0bd1f1847b9314",
    "type": "ui_group",
    "name": "OutputJSON",
    "tab": "dfdaf4f50f1c9b63",
    "order": 2,
    "disp": false,
    "width": 18,
    "collapse": false,
    "className": ""
  },
  {
    "id": "91594fd1a4a6b111",
    "type": "ui_group",
    "name": "InputJSON",
    "tab": "dfdaf4f50f1c9b63",
    "order": 1,
    "disp": false,
    "width": 14,
    "collapse": false,
    "className": ""
  },
  {
    "id": "dfdaf4f50f1c9b63",
    "type": "ui_tab",
    "name": "JSON_Config",
    "icon": "dashboard",
    "order": 1,
    "disabled": false,
    "hidden": false
  }
]
